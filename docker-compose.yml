version: '3.4'

x-environment-db:
  &shared-envvar-db
  DB_HOST: "db"
  DB_PORT: "27017"
  MONGO_INITDB_ROOT_USERNAME: admin
  MONGO_INITDB_ROOT_PASSWORD: pass

x-environment-kafka:
  &shared-envvar-kafka
  KAFKA_SERVER: kafka
  KAFKA_PORT: "29092"

services:
  auth:
    image: popug_auth
    build: ./auth
    environment:
      DB_DATABASE: "auth"
      VERSION: "${AUTH_VERSION:-auth-0.0.1}"
      AUTH_AUTHSECRET: "${AUTH_AUTH_AUTHSECRET:-auth_secret}"
      << : *shared-envvar-db
      << : *shared-envvar-kafka
    ports:
      - "80:80"
    volumes:
      - ./common:/code/common # in practice, i would've `pip install popug-common` in Dockerfile
      - ./auth/auth:/code/auth
    depends_on:
      - db
      - kafka
      - zookeeper
    command: ["uvicorn", "auth.app:app", "--host", "0.0.0.0", "--port", "80", "--reload"]
    networks:
      - auth
      - internal
      - kafka

  db:
    image: mongo:latest
    logging:
      driver: none
    environment:
      << : *shared-envvar-db
    ports:
      - "27099:27017"
    networks:
      # in practice, i would've split this DB in 3x independent ones
      - auth
      - tasktracker
      - billing

  tasktracker:
    image: popug_tasktracker
    build: ./tasktracker
    environment:
      DB_DATABASE: "tasktracker"
      AUTH_URL: "http://auth/"
      VERSION: "${TASKTRACKER_VERSION:-tasktracker-0.0.1}"
      << : *shared-envvar-db
      << : *shared-envvar-kafka
    ports:
      - "81:80"
    volumes:
      - ./common:/code/common # in practice, i would've `pip install popug-common` in Dockerfile
      - ./tasktracker/tasktracker:/code/tasktracker
    depends_on:
      - auth
    command: ["uvicorn", "tasktracker.app:app", "--host", "0.0.0.0", "--port", "80", "--reload"]
    networks:
      - internal
      - tasktracker
      - kafka

  tasktracker-listener:
    image: popug_tasktracker
    build: ./tasktracker
    restart: always
    environment:
      DB_DATABASE: "tasktracker"
      VERSION: "${TASKTRACKER_VERSION:-tasktracker-0.0.1}"
      << : *shared-envvar-db
      << : *shared-envvar-kafka
    command: ["python", "-m", "tasktracker.consumer.app"]
    depends_on:
      - tasktracker
      - kafka
      - zookeeper
    volumes:
      - ./common:/code/common # in practice, i would've `pip install popug-common` in Dockerfile
      - ./tasktracker/tasktracker:/code/tasktracker
    networks:
      - kafka
      - tasktracker


  billing:
    image: popug_billing
    build: ./billing
    environment:
      DB_DATABASE: "billing"
      AUTH_URL: "http://auth/"
      VERSION: "${BILLING_VERSION:-billing-0.0.1}"
      SYSTEM_ACCOUNT_USER_ID: "sys"
      << : *shared-envvar-db
      << : *shared-envvar-kafka
    ports:
      - "82:80"
    volumes:
      - ./common:/code/common # in practice, i would've `pip install popug-common` in Dockerfile
      - ./billing/billing:/code/billing
    depends_on:
      - auth
      - tasktracker
    command: ["uvicorn", "billing.app:app", "--host", "0.0.0.0", "--port", "80", "--reload"]
    networks:
      - internal
      - billing
      - kafka

  billing-listener:
    image: popug_billing
    build: ./billing
    restart: always
    environment:
      DB_DATABASE: "billing"
      AUTH_URL: "http://auth/"
      VERSION: "${BILLING_VERSION:-billing-0.0.1}"
      SYSTEM_ACCOUNT_USER_ID: "sys"
      << : *shared-envvar-db
      << : *shared-envvar-kafka
    command: ["python", "-m", "billing.consumer"]
    volumes:
      - ./common:/code/common # in practice, i would've `pip install popug-common` in Dockerfile
      - ./billing/billing:/code/billing
    depends_on:
      - billing
      - kafka
      - zookeeper
    networks:
      - billing
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    logging:
      driver: none
    networks:
      - kafka
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    logging:
      driver: none
    networks:
      - kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    logging:
      driver: none
    networks:
      - kafka
    depends_on:
      - kafka
      - zookeeper
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092


networks:
  auth:
    driver: bridge
  internal:
    driver: bridge
  tasktracker:
    driver: bridge
  billing:
    driver: bridge
  kafka:
    driver: bridge
